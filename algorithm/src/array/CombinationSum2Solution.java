package array;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Deque;
import java.util.List;

/**
 * 40. 组合总和
 * 给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和 target 的组合。
 * candidates 中的每个数字在每个组合中只能使用一次。
 * @author dell
 *
 */

public class CombinationSum2Solution {
	
	public List<List<Integer>> combinationSum2(int[] candidates, int target){
		
	       int len = candidates.length;
	        List<List<Integer>> res = new ArrayList<>();
	        if (len == 0) {
	            return res;
	        }

	        // 关键步骤
	        Arrays.sort(candidates);

	        Deque<Integer> path = new ArrayDeque<>(len);
	        dfs(candidates, len, 0, target, path, res);
	        return res;
		
	}
	
	
	
	 /**
     * @param candidates 候选数组
     * @param len        冗余变量
     * @param begin      从候选数组的 begin 位置开始搜索
     * @param target     表示剩余，这个值一开始等于 target，基于题目中说明的"所有数字（包括目标数）都是正整数"这个条件
     * @param path       从根结点到叶子结点的路径
     * @param res
     */
    private void dfs(int[] candidates, int len, int begin, int target, Deque<Integer> path, List<List<Integer>> res) {
        if (target == 0) {
            res.add(new ArrayList<>(path));
            return;
        }
        for (int i = begin; i < len; i++) {
            // 大剪枝
            if (target - candidates[i] < 0) {
                break;
            }

            // 小剪枝
            if (i > begin && candidates[i] == candidates[i - 1]) {
                continue;
            }

            path.addLast(candidates[i]);
            // 调试语句 ①
            // System.out.println("递归之前 => " + path + "，剩余 = " + (target - candidates[i]));

            // 因为元素不可以重复使用，这里递归传递下去的是 i + 1 而不是 i
            dfs(candidates, len, i + 1, target - candidates[i], path, res);

            path.removeLast();

        }
    }



}
